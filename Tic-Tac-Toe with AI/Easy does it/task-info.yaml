type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/game/Cells.java
  visible: true
  text: |
    package tictactoe.game;

    import java.util.Arrays;
    import java.util.Collections;

    public class Cells {

        public boolean isEmpty(int y, int x) {
            return Board.board[y][x] == '_';
        }

        public int getCount(int y, int x) {
            int count = 0;
            if (y == 2) count += 3;
            else if (y == 3) count += 6;

            if (x == 2) count += 1;
            else if (x == 3) count += 2;
            return count;
        }

        public boolean coordsOutOfRange(int y, int x) {
            return ((y > 3) || (y < 1)) || ((x > 3) || (x < 1));
        }

        private boolean isThree(int num) {
            return num == 3;
        }

        private boolean xWins() {
            return crossThreeExists('X') || horizontalThreeExists('X') || verticalThreeExists('X');
        }

        private boolean owins() {
            return crossThreeExists('O') || horizontalThreeExists('O') || verticalThreeExists('O');
        }

        public boolean finalMessage() {
            if (xWins()) {
                System.out.print("\nX wins");
                return true;
            } else if (owins()) {
                System.out.print("\nO wins");
                return true;

            } else if (!xWins() && !owins()) {
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (Board.board[i][j] == '_') {
                            System.out.print("\nGame not finished");
                            return true;
                        }
                    }
                }
                if (Collections.frequency(Arrays.asList(Board.board), '_') == 0) {
                    System.out.print("\nDraw");
                    return true;
                }
            }
            return false;
        }

        public boolean isImpossible() {
            return owins() && xWins();
        }

        public boolean crossThreeExists(char charToCheck) {
            int count = 0;
            int y = 0;
            int x = 0;


            boolean isFirstDone = false;

            for (int i = 0; i < 2; i++) {
                if (!isFirstDone) {
                    System.out.println("FIRST");
                    for (int j = 0; j < 3; j++) {
                        if (y == 3 || x == 3) {
                            break;
                        }
                        if (Board.board[y][x] == charToCheck) {
                            count++;
                        }
                        x++;
                        y++;
                    }
                    if (count == 3) return true;
                } else {
                    System.out.println("SECOND");
                    x = 2;
                    y = 0;
                    count = 0;
                    for (int j = 0; j < 3; j++) {
                        if (y == 3 || x == 3) {
                            break;
                        }
                        if (Board.board[y][x] == charToCheck) {
                            count++;
                        }
                        x--;
                        y++;
                    }
                }
                isFirstDone = true;
            }
            return count == 3;
        }

        public boolean horizontalThreeExists(char charToCheck) {
            int count = 0;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (Board.board[i][j] == charToCheck) {
                        count++;
                    }
                }
                if (count == 3) {
                    return true;
                } else {
                    count = 0;
                }
            }

            return false;
        }

        public boolean verticalThreeExists(char charToCheck) {
            int count = 0;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (Board.board[j][i] == charToCheck) {
                        count++;
                    }
                }
                if (count == 3) {
                    return true;
                } else {
                    count = 0;
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/tictactoe/game/Board.java
  visible: true
  text: |
    package tictactoe.game;

    import java.util.Arrays;
    import java.util.Scanner;

    public class Board {
        public static char[][] board = new char[3][3];
        private Cells cells = new Cells();

        public Board() {
            int stringCount = -1;
            for (int i = 0; i < 3; i++) {
                Arrays.fill(board[i], '_');
            }
        }

        public void printBoard() {
            System.out.println("---------");
            for (int i = 0; i < 3; i++) {
                System.out.print("| ");
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == '_') {
                        System.out.print("  ");
                    } else {
                        System.out.print(board[i][j] + " ");
                    }
                }
                System.out.println("|");
            }
            System.out.print("---------");
        }

        public void startGame() {
            Scanner scanner = new Scanner(System.in);
            printBoard();
            int xCount = 0;
            int oCount = 0;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (Board.board[i][j] == 'X') xCount++;
                    if (Board.board[i][j] == 'O') oCount++;
                }
            }

            boolean isFirstPlayer = xCount == oCount;
            int y;
            int x;
            while (true) {
                System.out.print("\nEnter the coordinates: ");

                try {
                    y = scanner.nextInt();
                    x = scanner.nextInt();
                } catch (Exception ignore) {
                    System.out.print("You should enter numbers!");
                    scanner.next();
                    continue;
                }
                if (cells.coordsOutOfRange(y, x)) {
                    System.out.print("Coordinates should be from 1 to 3!");
                    continue;
                } else if (board[y - 1][x - 1] != '_') {
                    System.out.print("This cell is occupied! Choose another one!");
                    continue;
                }
                if (isFirstPlayer) {
                    board[y - 1][x - 1] = 'X';
                } else {
                    board[y - 1][x - 1] = 'O';
                }

                isFirstPlayer = !isFirstPlayer;

                printBoard();

                if (cells.finalMessage()) {
                    return;
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7435#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 02 Jul 2022 06:36:30 UTC
record: 2
